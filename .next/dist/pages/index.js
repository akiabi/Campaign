'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _factory = require('../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _Layout = require('../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _routes = require('../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'E:\\ethereum\\Mishmash\\pages\\index.js?entry';


var CampaignIndex = function (_Component) {
  (0, _inherits3.default)(CampaignIndex, _Component);

  function CampaignIndex() {
    (0, _classCallCheck3.default)(this, CampaignIndex);

    return (0, _possibleConstructorReturn3.default)(this, (CampaignIndex.__proto__ || (0, _getPrototypeOf2.default)(CampaignIndex)).apply(this, arguments));
  }

  (0, _createClass3.default)(CampaignIndex, [{
    key: 'renderCampaigns',
    value: function renderCampaigns() {
      var items = this.props.campaigns.map(function (address) {
        return {
          header: address,
          description: _react2.default.createElement(_routes.Link, { route: '/campaigns/' + address, __source: {
              fileName: _jsxFileName,
              lineNumber: 21
            }
          }, _react2.default.createElement('a', {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 23
            }
          }, 'View Campaign')),
          fluid: true
        };
      });

      return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
          fileName: _jsxFileName,
          lineNumber: 31
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 36
        }
      }, _react2.default.createElement('div', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 37
        }
      }, _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 38
        }
      }, 'Open Campaigns'), _react2.default.createElement(_routes.Link, { route: '/campaigns/new', __source: {
          fileName: _jsxFileName,
          lineNumber: 40
        }
      }, _react2.default.createElement('a', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 41
        }
      }, _react2.default.createElement(_semanticUiReact.Button, {
        floated: 'right',
        content: 'Create Campaign',
        icon: 'add circle',
        primary: true,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 42
        }
      }))), this.renderCampaigns()), _react2.default.createElement(_semanticUiReact.Item.Group, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 54
        }
      }, _react2.default.createElement(_semanticUiReact.Item, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 57
        }
      }, _react2.default.createElement(_semanticUiReact.Item.Content, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 60
        }
      }, _react2.default.createElement(_semanticUiReact.Item.Header, { as: 'a', __source: {
          fileName: _jsxFileName,
          lineNumber: 61
        }
      }, 'What do we do?'), _react2.default.createElement(_semanticUiReact.Item.Meta, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 62
        }
      }), _react2.default.createElement(_semanticUiReact.Item.Description, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 63
        }
      }), _react2.default.createElement(_semanticUiReact.Item.Extra, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 66
        }
      }, 'Our decentralized Application platform is a place where public can donate crypto currencies to any of the partnered NGO\'s. It can help local charities promote their campaigns internationally by receiving cryptocurrency donations. The crypto currency they donate is completely transparent on how the NGO\'s use them. Block chain technology allows donors to trace transactions on a public platform in real time. Donors can see how funds are spent and ensure they reach their final destination. Project results are shared for direct engagement with people as well. The NGO can start campaigns by this way public can donate to campaigns and can rest assured that any funds spent inside the platform will never be misused. The app data such as user details, campaign documents, etc. are stored in our platform is completely decentralized. Not only this, the non volunteers will be given rewards in form of crypto currency.  The rewards will be of our own crypto currency that we will be generating in future.'))), _react2.default.createElement(_semanticUiReact.Item, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 74
        }
      }, _react2.default.createElement(_semanticUiReact.Item.Content, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 77
        }
      }, _react2.default.createElement(_semanticUiReact.Item.Header, { as: 'a', __source: {
          fileName: _jsxFileName,
          lineNumber: 78
        }
      }, 'Donate to a cause you believe in'), _react2.default.createElement(_semanticUiReact.Item.Meta, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 79
        }
      }), _react2.default.createElement(_semanticUiReact.Item.Description, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 80
        }
      }), _react2.default.createElement(_semanticUiReact.Item.Extra, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 83
        }
      })))));
    }
  }], [{
    key: 'getInitialProps',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var campaigns;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _factory2.default.methods.getDeployedCampaigns().call();

              case 2:
                campaigns = _context.sent;
                return _context.abrupt('return', { campaigns: campaigns });

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps() {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return CampaignIndex;
}(_react.Component);

exports.default = CampaignIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ2FtcGFpZ25JbmRleCIsIl9Db21wb25lbnQiLCJfX3Byb3RvX18iLCJhcHBseSIsImFyZ3VtZW50cyIsImtleSIsInZhbHVlIiwicmVuZGVyQ2FtcGFpZ25zIiwiaXRlbXMiLCJwcm9wcyIsImNhbXBhaWducyIsIm1hcCIsImFkZHJlc3MiLCJoZWFkZXIiLCJkZXNjcmlwdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJyb3V0ZSIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiZmx1aWQiLCJHcm91cCIsInJlbmRlciIsImZsb2F0ZWQiLCJjb250ZW50IiwiaWNvbiIsInByaW1hcnkiLCJDb250ZW50IiwiSGVhZGVyIiwiYXMiLCJNZXRhIiwiRGVzY3JpcHRpb24iLCJFeHRyYSIsIl9yZWYiLCJtYXJrIiwiX2NhbGxlZSIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJtZXRob2RzIiwiZ2V0RGVwbG95ZWRDYW1wYWlnbnMiLCJjYWxsIiwic2VudCIsImFicnVwdCIsInN0b3AiLCJnZXRJbml0aWFsUHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFMQSxJQUFJQSxlQUFlLCtDQUFuQjs7O0FBUUEsSUFBSUMsZ0JBQWdCLFVBQVVDLFVBQVYsRUFBc0I7QUFDeEMsMEJBQVVELGFBQVYsRUFBeUJDLFVBQXpCOztBQUVBLFdBQVNELGFBQVQsR0FBeUI7QUFDdkIsa0NBQWdCLElBQWhCLEVBQXNCQSxhQUF0Qjs7QUFFQSxXQUFPLHlDQUEyQixJQUEzQixFQUFpQyxDQUFDQSxjQUFjRSxTQUFkLElBQTJCLDhCQUF1QkYsYUFBdkIsQ0FBNUIsRUFBbUVHLEtBQW5FLENBQXlFLElBQXpFLEVBQStFQyxTQUEvRSxDQUFqQyxDQUFQO0FBQ0Q7O0FBRUQsNkJBQWFKLGFBQWIsRUFBNEIsQ0FBQztBQUMzQkssU0FBSyxpQkFEc0I7QUFFM0JDLFdBQU8sU0FBU0MsZUFBVCxHQUEyQjtBQUNoQyxVQUFJQyxRQUFRLEtBQUtDLEtBQUwsQ0FBV0MsU0FBWCxDQUFxQkMsR0FBckIsQ0FBeUIsVUFBVUMsT0FBVixFQUFtQjtBQUN0RCxlQUFPO0FBQ0xDLGtCQUFRRCxPQURIO0FBRUxFLHVCQUFhLGdCQUFNQyxhQUFOLGVBRVgsRUFBRUMsT0FBTyxnQkFBZ0JKLE9BQXpCLEVBQWtDSyxVQUFVO0FBQ3hDQyx3QkFBVW5CLFlBRDhCO0FBRXhDb0IsMEJBQVk7QUFGNEI7QUFBNUMsV0FGVyxFQU9YLGdCQUFNSixhQUFOLENBQ0UsR0FERixFQUVFO0FBQ0VFLHNCQUFVO0FBQ1JDLHdCQUFVbkIsWUFERjtBQUVSb0IsMEJBQVk7QUFGSjtBQURaLFdBRkYsRUFRRSxlQVJGLENBUFcsQ0FGUjtBQW9CTEMsaUJBQU87QUFwQkYsU0FBUDtBQXNCRCxPQXZCVyxDQUFaOztBQXlCQSxhQUFPLGdCQUFNTCxhQUFOLENBQW9CLHNCQUFLTSxLQUF6QixFQUFnQyxFQUFFYixPQUFPQSxLQUFULEVBQWdCUyxVQUFVO0FBQzdEQyxvQkFBVW5CLFlBRG1EO0FBRTdEb0Isc0JBQVk7QUFGaUQ7QUFBMUIsT0FBaEMsQ0FBUDtBQUtEO0FBakMwQixHQUFELEVBa0N6QjtBQUNEZCxTQUFLLFFBREo7QUFFREMsV0FBTyxTQUFTZ0IsTUFBVCxHQUFrQjtBQUN2QixhQUFPLGdCQUFNUCxhQUFOLG1CQUVMO0FBQ0VFLGtCQUFVO0FBQ1JDLG9CQUFVbkIsWUFERjtBQUVSb0Isc0JBQVk7QUFGSjtBQURaLE9BRkssRUFRTCxnQkFBTUosYUFBTixDQUNFLEtBREYsRUFFRTtBQUNFRSxrQkFBVTtBQUNSQyxvQkFBVW5CLFlBREY7QUFFUm9CLHNCQUFZO0FBRko7QUFEWixPQUZGLEVBUUUsZ0JBQU1KLGFBQU4sQ0FDRSxJQURGLEVBRUU7QUFDRUUsa0JBQVU7QUFDUkMsb0JBQVVuQixZQURGO0FBRVJvQixzQkFBWTtBQUZKO0FBRFosT0FGRixFQVFFLGdCQVJGLENBUkYsRUFrQkUsZ0JBQU1KLGFBQU4sZUFFRSxFQUFFQyxPQUFPLGdCQUFULEVBQTJCQyxVQUFVO0FBQ2pDQyxvQkFBVW5CLFlBRHVCO0FBRWpDb0Isc0JBQVk7QUFGcUI7QUFBckMsT0FGRixFQU9FLGdCQUFNSixhQUFOLENBQ0UsR0FERixFQUVFO0FBQ0VFLGtCQUFVO0FBQ1JDLG9CQUFVbkIsWUFERjtBQUVSb0Isc0JBQVk7QUFGSjtBQURaLE9BRkYsRUFRRSxnQkFBTUosYUFBTiwwQkFBNEI7QUFDMUJRLGlCQUFTLE9BRGlCO0FBRTFCQyxpQkFBUyxpQkFGaUI7QUFHMUJDLGNBQU0sWUFIb0I7QUFJMUJDLGlCQUFTLElBSmlCO0FBSzFCVCxrQkFBVTtBQUNSQyxvQkFBVW5CLFlBREY7QUFFUm9CLHNCQUFZO0FBRko7QUFMZ0IsT0FBNUIsQ0FSRixDQVBGLENBbEJGLEVBNkNFLEtBQUtaLGVBQUwsRUE3Q0YsQ0FSSyxFQXVETCxnQkFBTVEsYUFBTixDQUNFLHNCQUFLTSxLQURQLEVBRUU7QUFDRUosa0JBQVU7QUFDUkMsb0JBQVVuQixZQURGO0FBRVJvQixzQkFBWTtBQUZKO0FBRFosT0FGRixFQVFFLGdCQUFNSixhQUFOLHdCQUVFO0FBQ0VFLGtCQUFVO0FBQ1JDLG9CQUFVbkIsWUFERjtBQUVSb0Isc0JBQVk7QUFGSjtBQURaLE9BRkYsRUFRRSxnQkFBTUosYUFBTixDQUNFLHNCQUFLWSxPQURQLEVBRUU7QUFDRVYsa0JBQVU7QUFDUkMsb0JBQVVuQixZQURGO0FBRVJvQixzQkFBWTtBQUZKO0FBRFosT0FGRixFQVFFLGdCQUFNSixhQUFOLENBQ0Usc0JBQUthLE1BRFAsRUFFRSxFQUFFQyxJQUFJLEdBQU4sRUFBV1osVUFBVTtBQUNqQkMsb0JBQVVuQixZQURPO0FBRWpCb0Isc0JBQVk7QUFGSztBQUFyQixPQUZGLEVBT0UsZ0JBUEYsQ0FSRixFQWlCRSxnQkFBTUosYUFBTixDQUFvQixzQkFBS2UsSUFBekIsRUFBK0I7QUFDN0JiLGtCQUFVO0FBQ1JDLG9CQUFVbkIsWUFERjtBQUVSb0Isc0JBQVk7QUFGSjtBQURtQixPQUEvQixDQWpCRixFQXVCRSxnQkFBTUosYUFBTixDQUFvQixzQkFBS2dCLFdBQXpCLEVBQXNDO0FBQ3BDZCxrQkFBVTtBQUNSQyxvQkFBVW5CLFlBREY7QUFFUm9CLHNCQUFZO0FBRko7QUFEMEIsT0FBdEMsQ0F2QkYsRUE2QkUsZ0JBQU1KLGFBQU4sQ0FDRSxzQkFBS2lCLEtBRFAsRUFFRTtBQUNFZixrQkFBVTtBQUNSQyxvQkFBVW5CLFlBREY7QUFFUm9CLHNCQUFZO0FBRko7QUFEWixPQUZGLEVBUUUsOCtCQVJGLENBN0JGLENBUkYsQ0FSRixFQXlERSxnQkFBTUosYUFBTix3QkFFRTtBQUNFRSxrQkFBVTtBQUNSQyxvQkFBVW5CLFlBREY7QUFFUm9CLHNCQUFZO0FBRko7QUFEWixPQUZGLEVBUUUsZ0JBQU1KLGFBQU4sQ0FDRSxzQkFBS1ksT0FEUCxFQUVFO0FBQ0VWLGtCQUFVO0FBQ1JDLG9CQUFVbkIsWUFERjtBQUVSb0Isc0JBQVk7QUFGSjtBQURaLE9BRkYsRUFRRSxnQkFBTUosYUFBTixDQUNFLHNCQUFLYSxNQURQLEVBRUUsRUFBRUMsSUFBSSxHQUFOLEVBQVdaLFVBQVU7QUFDakJDLG9CQUFVbkIsWUFETztBQUVqQm9CLHNCQUFZO0FBRks7QUFBckIsT0FGRixFQU9FLGtDQVBGLENBUkYsRUFpQkUsZ0JBQU1KLGFBQU4sQ0FBb0Isc0JBQUtlLElBQXpCLEVBQStCO0FBQzdCYixrQkFBVTtBQUNSQyxvQkFBVW5CLFlBREY7QUFFUm9CLHNCQUFZO0FBRko7QUFEbUIsT0FBL0IsQ0FqQkYsRUF1QkUsZ0JBQU1KLGFBQU4sQ0FBb0Isc0JBQUtnQixXQUF6QixFQUFzQztBQUNwQ2Qsa0JBQVU7QUFDUkMsb0JBQVVuQixZQURGO0FBRVJvQixzQkFBWTtBQUZKO0FBRDBCLE9BQXRDLENBdkJGLEVBNkJFLGdCQUFNSixhQUFOLENBQW9CLHNCQUFLaUIsS0FBekIsRUFBZ0M7QUFDOUJmLGtCQUFVO0FBQ1JDLG9CQUFVbkIsWUFERjtBQUVSb0Isc0JBQVk7QUFGSjtBQURvQixPQUFoQyxDQTdCRixDQVJGLENBekRGLENBdkRLLENBQVA7QUErSkQ7QUFsS0EsR0FsQ3lCLENBQTVCLEVBcU1JLENBQUM7QUFDSGQsU0FBSyxpQkFERjtBQUVIQyxXQUFPLFlBQVk7QUFDakIsVUFBSTJCLE9BQU8saUNBQW1CLGFBQWEsc0JBQW9CQyxJQUFwQixDQUF5QixTQUFTQyxPQUFULEdBQW1CO0FBQ3JGLFlBQUl6QixTQUFKO0FBQ0EsZUFBTyxzQkFBb0IwQixJQUFwQixDQUF5QixTQUFTQyxRQUFULENBQWtCQyxRQUFsQixFQUE0QjtBQUMxRCxpQkFBTyxDQUFQLEVBQVU7QUFDUixvQkFBUUEsU0FBU0MsSUFBVCxHQUFnQkQsU0FBU0UsSUFBakM7QUFDRSxtQkFBSyxDQUFMO0FBQ0VGLHlCQUFTRSxJQUFULEdBQWdCLENBQWhCO0FBQ0EsdUJBQU8sa0JBQVFDLE9BQVIsQ0FBZ0JDLG9CQUFoQixHQUF1Q0MsSUFBdkMsRUFBUDs7QUFFRixtQkFBSyxDQUFMO0FBQ0VqQyw0QkFBWTRCLFNBQVNNLElBQXJCO0FBQ0EsdUJBQU9OLFNBQVNPLE1BQVQsQ0FBZ0IsUUFBaEIsRUFBMEIsRUFBRW5DLFdBQVdBLFNBQWIsRUFBMUIsQ0FBUDs7QUFFRixtQkFBSyxDQUFMO0FBQ0EsbUJBQUssS0FBTDtBQUNFLHVCQUFPNEIsU0FBU1EsSUFBVCxFQUFQO0FBWEo7QUFhRDtBQUNGLFNBaEJNLEVBZ0JKWCxPQWhCSSxFQWdCSyxJQWhCTCxDQUFQO0FBaUJELE9BbkIwQyxDQUFoQyxDQUFYOztBQXFCQSxlQUFTWSxlQUFULEdBQTJCO0FBQ3pCLGVBQU9kLEtBQUs5QixLQUFMLENBQVcsSUFBWCxFQUFpQkMsU0FBakIsQ0FBUDtBQUNEOztBQUVELGFBQU8yQyxlQUFQO0FBQ0QsS0EzQk07QUFGSixHQUFELENBck1KOztBQXFPQSxTQUFPL0MsYUFBUDtBQUNELENBL09tQixrQkFBcEI7O2tCQWlQZUEsYSIsImZpbGUiOiJ1bmtub3duIn0=