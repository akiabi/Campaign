'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _campaign = require('../../ethereum/campaign');

var _campaign2 = _interopRequireDefault(_campaign);

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _ContributeForm = require('../../components/ContributeForm');

var _ContributeForm2 = _interopRequireDefault(_ContributeForm);

var _routes = require('../../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'E:\\ethereum\\Mishmash\\pages\\campaigns\\show.js?entry';


var CampaignShow = function (_Component) {
  (0, _inherits3.default)(CampaignShow, _Component);

  function CampaignShow() {
    (0, _classCallCheck3.default)(this, CampaignShow);

    return (0, _possibleConstructorReturn3.default)(this, (CampaignShow.__proto__ || (0, _getPrototypeOf2.default)(CampaignShow)).apply(this, arguments));
  }

  (0, _createClass3.default)(CampaignShow, [{
    key: 'renderCards',
    value: function renderCards() {
      var _props = this.props,
          balance = _props.balance,
          manager = _props.manager,
          minimumContribution = _props.minimumContribution,
          requestsCount = _props.requestsCount,
          approversCount = _props.approversCount;

      var items = [{
        header: ' Akshaya Patra',

        description: 'In Mission 10 Million Meals to provide food to schoolkids across 19 states in India. Join the fight against hunger and malnutrition.',
        style: { overflowWrap: 'break-word' }
      }, {
        header: manager,
        meta: 'Address of Manager',
        description: 'The manager created this campaign and can create requests to withdraw money',
        style: { overflowWrap: 'break-word' }
      }, {
        header: minimumContribution,
        meta: 'Minimum Contribution (wei)',
        description: 'You must contribute at least this much wei to become an approver'
      }, {
        header: requestsCount,
        meta: 'Number of Requests',
        description: 'A request tries to withdraw money from the contract. Requests must be approved by approvers'
      }, {
        header: approversCount,
        meta: 'Number of Donators',
        description: 'Number of people who have already donated to this campaign'
      }, {
        header: _web2.default.utils.fromWei(balance, 'ether'),
        meta: 'Campaign Balance (ether)',
        description: 'The balance is how much money this campaign has left to spend.'
      }];

      return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
          fileName: _jsxFileName,
          lineNumber: 75
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 80
        }
      }, _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 81
        }
      }, 'Campaign Show'), _react2.default.createElement(_semanticUiReact.Grid, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 82
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 83
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 10, __source: {
          fileName: _jsxFileName,
          lineNumber: 84
        }
      }, this.renderCards()), _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 6, __source: {
          fileName: _jsxFileName,
          lineNumber: 86
        }
      }, _react2.default.createElement(_ContributeForm2.default, { address: this.props.address, __source: {
          fileName: _jsxFileName,
          lineNumber: 87
        }
      }))), _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 91
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Column, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 92
        }
      }, _react2.default.createElement(_routes.Link, { route: '/campaigns/' + this.props.address + '/requests', __source: {
          fileName: _jsxFileName,
          lineNumber: 93
        }
      }, _react2.default.createElement('a', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 94
        }
      }, _react2.default.createElement(_semanticUiReact.Button, { primary: true, __source: {
          fileName: _jsxFileName,
          lineNumber: 95
        }
      }, 'View Requests')))))));
    }
  }], [{
    key: 'getInitialProps',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
        var campaign, summary;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                campaign = (0, _campaign2.default)(props.query.address);
                _context.next = 3;
                return campaign.methods.getSummary().call();

              case 3:
                summary = _context.sent;
                return _context.abrupt('return', {
                  address: props.query.address,
                  minimumContribution: summary[0],
                  balance: summary[1],
                  requestsCount: summary[2],
                  approversCount: summary[3],
                  manager: summary[4]
                });

              case 5:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps(_x) {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return CampaignShow;
}(_react.Component);

exports.default = CampaignShow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ2FtcGFpZ25TaG93IiwiX0NvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJDYXJkcyIsIl9wcm9wcyIsInByb3BzIiwiYmFsYW5jZSIsIm1hbmFnZXIiLCJtaW5pbXVtQ29udHJpYnV0aW9uIiwicmVxdWVzdHNDb3VudCIsImFwcHJvdmVyc0NvdW50IiwiaXRlbXMiLCJoZWFkZXIiLCJkZXNjcmlwdGlvbiIsInN0eWxlIiwib3ZlcmZsb3dXcmFwIiwibWV0YSIsInV0aWxzIiwiZnJvbVdlaSIsImNyZWF0ZUVsZW1lbnQiLCJHcm91cCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicmVuZGVyIiwiUm93IiwiQ29sdW1uIiwid2lkdGgiLCJhZGRyZXNzIiwicm91dGUiLCJwcmltYXJ5IiwiX3JlZiIsIm1hcmsiLCJfY2FsbGVlIiwiY2FtcGFpZ24iLCJzdW1tYXJ5Iiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsInF1ZXJ5IiwibWV0aG9kcyIsImdldFN1bW1hcnkiLCJjYWxsIiwic2VudCIsImFicnVwdCIsInN0b3AiLCJnZXRJbml0aWFsUHJvcHMiLCJfeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFQQSxJQUFJQSxlQUFlLHlEQUFuQjs7O0FBU0EsSUFBSUMsZUFBZSxVQUFVQyxVQUFWLEVBQXNCO0FBQ3ZDLDBCQUFVRCxZQUFWLEVBQXdCQyxVQUF4Qjs7QUFFQSxXQUFTRCxZQUFULEdBQXdCO0FBQ3RCLGtDQUFnQixJQUFoQixFQUFzQkEsWUFBdEI7O0FBRUEsV0FBTyx5Q0FBMkIs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